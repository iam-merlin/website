{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Title/index.js","webpack:///./src/components/Excerpt/index.js","webpack:///./src/components/Link/index.js","webpack:///./src/components/Entry/index.js","webpack:///./src/components/PostEntry/index.js","webpack:///./src/components/seo.js"],"names":["IndexPage","_ref","data","allMarkdownRemark","edges","map","edge","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_PostEntry__WEBPACK_IMPORTED_MODULE_2__","Object","assign","key","node","id","frontmatter","fields","__webpack_exports__","res","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","pageQuery","styled","h2","_templateObject","P","p","Excerpt_templateObject","Excerpt","children","react_default","Link","Link_templateObject","article","Entry_templateObject","readingTime","path","excerpt","date","_ref$tags","tags","gatsby_browser_entry","query","render","_ref2","_ref2$markdownRemark$","markdownRemark","authorPath","avatar","firstname","lastname","Entry","to","toLowerCase","Tag","Title","Metadata","img","childImageSharp","resolutions","published","time","_3153017582","SEO","description","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired"],"mappings":"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","file":"component---src-pages-index-js-ef754039391cd186c65e.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport PostEntry from \"../components/PostEntry\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) =>\n  edges.map(edge => (\n    <PostEntry\n      key={edge.node.id}\n      {...edge.node.frontmatter}\n      {...edge.node.fields}\n    />\n  ))\n\nexport default res => (\n  <Layout>\n    <SEO title=\"Welcome\" />\n    <IndexPage {...res} />\n  </Layout>\n)\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { type: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            tags\n            author\n            excerpt\n          }\n          fields {\n            readingTime {\n              time\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import styled    from \"styled-components\"\n\nexport default styled.h2`\nfont-family: \"PT Serif\",\"Times New Roman\",serif;\nfont-size: 38px;\nfont-weight: 700;\nline-height: 54px;\nposition: relative;\nmargin: 0 0 38px 0;\ncolor: #1b1c1f;\n`\n","import React  from \"react\"\nimport styled from \"styled-components\"\n\nconst P = styled.p`\nfont-size: 18px;\nline-height: 42px;\nmargin: 48px 0 0 0;\n`;\n\nexport default ({ children }) => (\n  <P>{children}...</P>\n)\n","import styled from \"styled-components\"\nimport { Link } from \"gatsby\"\n\nexport default styled(Link)`\n  text-decoration: none;\n`\n","import styled from \"styled-components\"\n\nexport default styled.article`\n    position: relative;\n    margin: 0 0 68px 0;\n    padding: 0 0 68px 0;\n\n&::before {\n    position: absolute;\n    top: 38px;\n    left: -65px;\n    width: 6px;\n    height: 6px;\n    content: '';\n    transition: border 0.2s ease-out, background 0.2s ease-out;\n    border: 6px solid #f2f6fa;\n    border-radius: 12px;\n    background-color: #d2dbe5;\n}\n&::after {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 44%;\n    height: 1px;\n    content: '';\n    background-color: #e8e8ef;\n}\n`\n","import React                    from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Title    from \"../Title\"\nimport Metadata from \"../Metadata\"\nimport Excerpt  from \"../Excerpt\"\nimport Tag      from \"../Tag\"\nimport Link     from \"../Link\"\nimport Entry    from \"../Entry\"\n\nexport default ({ readingTime, path, title, excerpt, date, tags = [] }) => <StaticQuery\n  query={graphql`\n    query {\n      markdownRemark(frontmatter: { slug: { eq: \"romain-dary\" }, type: { eq: \"author\"} }) {\n        html\n        frontmatter {\n          path\n          firstname\n          lastname\n          avatar {\n            childImageSharp {\n              resolutions(width: 24) {\n                width\n                height\n                src\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `}\n\n  render={(\n    {\n      markdownRemark: {\n        frontmatter: {\n          path: authorPath,\n          avatar,\n          firstname,\n          lastname,\n        },\n      },\n    }) => (\n    <Entry>\n      {tags[0] ? (<Link to={`/tags/${tags[0].toLowerCase()}`} key={tags[0]}><Tag>{tags[0]}</Tag></Link>) : null}\n      <Link to={path}><Title>{title}</Title></Link>\n      <Metadata\n        path={authorPath}\n        img={avatar.childImageSharp.resolutions}\n        firstname={firstname}\n        lastname={lastname}\n        published={date}\n        time={readingTime.time}\n      />\n      <Excerpt>{excerpt}</Excerpt>\n    </Entry>\n  )}\n/>\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}